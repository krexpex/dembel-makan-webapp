import React, { useEffect, useMemo, useRef, useState } from "react";
import confetti from "canvas-confetti";

/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const NICK = "–ú–∞–∫–∞–Ω";
const PROFILE = {
  realName: "–ê–Ω–¥—Ä–µ–π –ö–∏—Ä–∏–ª–ª–æ–≤–∏—á –ö–æ—Å–æ–ª–∞–ø–æ–≤",
  nickname: "–ú–∞–∫–∞–Ω",
  birth: { date: "2002-01-06", place: "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è" },
  country: "–†–æ—Å—Å–∏—è",
  profession: "—Ä—ç–ø–µ—Ä",
  genres: ["—Ä—ç–ø"],
  aliases: ["MC –ì–∞–π –§–æ–∫—Å", "Nemo MC", "Young Chaser", "Macan"],
  fitnessCategory: "–ê",
  assignment: "–ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –°–µ–º—ë–Ω–æ–≤—Å–∫–∏–π –ø–æ–ª–∫ (—É—Ç–æ—á–Ω—è–µ—Ç—Å—è)",
};
const SERVICE_START = "2025-10-01T00:00:00";
const DEMOBIL_DATE  = "2026-10-01T00:00:00";
/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

export default function App() {
  const tz = Intl.DateTimeFormat().resolvedOptions().timeZone || "Europe/Riga";
  const [now, setNow] = useState(Date.now());
  const [popped, setPopped] = useState(false);

  // —Å—á—ë—Ç—á–∏–∫ —Ç–∞–ø–æ–≤ –∏ —Ñ–ª–∞–≥–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞–¥–ø–∏—Å–µ–π
  const [tapCount, setTapCount] = useState(0);
  const [showMsg1, setShowMsg1] = useState(false);
  const [showMsg2, setShowMsg2] = useState(false);
  const [showMsg3, setShowMsg3] = useState(false);

  const confettiDoneRef = useRef(false);

  useEffect(() => {
    const id = setInterval(() => setNow(Date.now()), 1000);
    return () => clearInterval(id);
  }, []);

  useEffect(() => {
    const twa = window.Telegram?.WebApp;
    if (!twa) return;
    try { twa.expand(); twa.ready(); twa.enableClosingConfirmation(); } catch {}
  }, []);

  const startTs = useMemo(() => toLocalTimestamp(SERVICE_START), []);
  const endTs   = useMemo(()   => toLocalTimestamp(DEMOBIL_DATE), []);
  const totalMs  = Math.max(0, endTs - startTs);
  const leftMs   = Math.max(0, endTs - now);
  const passedMs = Math.max(0, now - startTs);

  const pct = totalMs > 0 ? Math.min(100, Math.max(0, (passedMs / totalMs) * 100)) : 0;
  const leftParts = msParts(leftMs);
  const isOver = leftMs <= 0 && totalMs > 0;

  useEffect(() => {
    if (isOver && !confettiDoneRef.current) {
      confettiDoneRef.current = true;
      burst(0.25); setTimeout(() => burst(0.5), 200); setTimeout(() => burst(0.75), 400);
      setTimeout(() => {
        confetti({ particleCount: 250, spread: 85, startVelocity: 45, scalar: 1.1, ticks: 240, origin: { y: 0.25 } });
      }, 900);
      try { navigator.vibrate?.(150); } catch {}
    }
    if (!isOver) confettiDoneRef.current = false;
  }, [isOver]);

  function burst(p = 0.5) {
    const n = Math.floor(100 * p);
    confetti({ particleCount: n, spread: 65, startVelocity: 38, origin: { x: 0.2, y: 0.4 } });
    confetti({ particleCount: n, spread: 65, startVelocity: 38, origin: { x: 0.8, y: 0.4 } });
  }

  function share() {
    const text = isOver
      ? `üéâ ${NICK} –î–ï–ú–ë–ï–õ–¨–ù–£–õ–°–Ø!\n\n–°–ª—É–∂–±–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`
      : `‚è≥ –î–æ –¥–µ–º–±–µ–ª—è ${NICK}: ${formatParts(leftParts)}.\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –æ—Ç—Å—á—ë—Ç—É!`;
    const url = window.location.href.split("?")[0];

    const twa = window.Telegram?.WebApp;
    if (twa?.shareURL) return twa.shareURL(url);
    if (twa?.shareText) return twa.shareText(`${text}\n${url}`);
    if (navigator.share) { navigator.share({ title: `–î–µ–º–±–µ–ª—å ${NICK}`, text, url }).catch(() => {}); return; }
    navigator.clipboard?.writeText(`${text}\n${url}`); alert("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ‚úÖ");
  }

  /* ‚îÄ‚îÄ –ö–æ–ª—å—Ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚îÄ‚îÄ */
  const size = 360;
  const stroke = 10;
  const r = (size - stroke) / 2;
  const C = 2 * Math.PI * r;

  // —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä—ã–π —Ç—Ä–µ–∫ (12 –º–µ—Å—è—Ü–µ–≤)
  const SEGMENTS = 12;
  const segmentLen = C / SEGMENTS;
  const gapLen = Math.max(4, segmentLen * 0.08);
  const dashPattern = `${segmentLen - gapLen} ${gapLen}`;

  // –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –±–µ–ª—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  const progressDashArray = C;
  const progressDashOffset = C * (1 - pct / 100);

  // –∫–ª–∏–∫ –ø–æ –ú–∞–∫–∞–Ω—É: –ø–æ–ø-—ç—Ñ—Ñ–µ–∫—Ç + —Å—á—ë—Ç—á–∏–∫
  function onMakanTap() {
    setPopped(true);
    setTimeout(() => setPopped(false), 180);

    setTapCount((prev) => {
      const next = prev + 1;
      if (next === 3) setShowMsg1(true);
      if (next === 7) setShowMsg2(true);
      if (next === 10) setShowMsg3(true);
      return next;
    });
  }

  function openGroup() {
    const url = "https://t.me/zdem_makana";
    const twa = window.Telegram?.WebApp;
    if (twa?.openTelegramLink) { twa.openTelegramLink(url); return; }
    window.open(url, "_blank", "noopener,noreferrer");
  }

  return (
    <div className="min-h-screen w-full bg-gradient-to-b from-[#0f1514] to-[#0b1110] text-zinc-50">
      <div className="mx-auto max-w-6xl grid md:grid-cols-[320px,1fr] gap-4 md:gap-6 p-4">

        {/* –ê–Ω–∫–µ—Ç–∞ —Å–ª–µ–≤–∞ */}
        <section className="order-2 md:order-1">
          <SoldierCard profile={PROFILE} service={{ start: SERVICE_START, end: DEMOBIL_DATE }} />
        </section>

        {/* –¢–∞–π–º–µ—Ä */}
        <section className="order-1 md:order-2 relative flex flex-col items-center justify-start md:justify-center rounded-3xl bg-zinc-900/60 backdrop-blur p-5 md:p-6 shadow-xl overflow-hidden">
          <div aria-hidden className="absolute inset-0 -z-10" style={{ background:
            "radial-gradient(30rem 30rem at 50% 20%, rgba(16,185,129,0.18), rgba(0,0,0,0))" }} />

          {/* –ö–û–ù–¢–ï–ô–ù–ï–† –î–õ–Ø –°–¶–ï–ù–´ */}
          <div className="relative flex items-center justify-center" style={{ width: size, height: size }}>
            {/* –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª—å—Ü–æ */}
            <svg className="absolute inset-0" width={size} height={size} viewBox={`0 0 ${size} ${size}`}>
              <circle
                cx={size/2} cy={size/2} r={r}
                fill="none"
                stroke="rgba(255,255,255,0.13)"
                strokeWidth={stroke}
                strokeLinecap="butt"
                strokeDasharray={dashPattern}
                transform={`rotate(-90 ${size/2} ${size/2})`}
              />
              <circle
                cx={size/2} cy={size/2} r={r}
                fill="none"
                stroke="rgba(255,255,255,0.95)"
                strokeWidth={stroke}
                strokeLinecap="round"
                strokeDasharray={progressDashArray}
                strokeDashoffset={progressDashOffset}
                transform={`rotate(-90 ${size/2} ${size/2})`}
                style={{ transition: "stroke-dashoffset 0.8s ease" }}
              />
            </svg>

            {/* --- –ù–∞–¥–ø–∏—Å–∏-–ø–∞—Å—Ö–∞–ª–∫–∏ --- */}
            {/* 1) –ù–∞ 3-–º —Ç–∞–ø–µ ‚Äî ‚Äú–≤—ã–ø–æ–ª–∑–∞–µ—Ç‚Äù –∏–∑-–∑–∞ –ú–∞–∫–∞–Ω–∞ */}
            {showMsg1 && (
              <div className="absolute inset-0 grid place-items-center -z-0 animate-rise-behind">
                <span className="jeb-label jeb-1">–î–ñ–ï–ë</span>
              </div>
            )}

            {/* 2) –ù–∞ 7-–º —Ç–∞–ø–µ ‚Äî —Å–ø—Ä–∞–≤–∞, —Å–ª–∞–π–¥–æ–º –≤–Ω—É—Ç—Ä—å */}
            {showMsg2 && (
              <div className="absolute top-1/2 right-0 -translate-y-1/2 pr-2 animate-slide-right pointer-events-none">
                <span className="jeb-label jeb-2">–£–®–ï–õ&nbsp;–î–ñ–ï–ë</span>
              </div>
            )}

            {/* 3) –ù–∞ 10-–º —Ç–∞–ø–µ ‚Äî –¥—É–≥–æ–π —Å–≤–µ—Ä—Ö—É (SVG textPath) */}
            {showMsg3 && (
              <svg
                className="absolute inset-0 animate-fade-in-slow pointer-events-none"
                width={size}
                height={size}
                viewBox={`0 0 ${size} ${size}`}
              >
                <defs>
                  {/* –¥—É–≥–∞ —á—É—Ç—å –±–æ–ª—å—à–µ –ø–æ —Ä–∞–¥–∏—É—Å—É */}
                  <path id="jeb-arc"
                        d={`M ${size*0.15} ${size*0.30}
                           A ${size*0.35} ${size*0.35} 0 0 1 ${size*0.85} ${size*0.30}`} />
                </defs>
                <text className="jeb-arc-text">
                  <textPath href="#jeb-arc" startOffset="50%" textAnchor="middle">
                    –î–ñ–ï–ë, –£–®–ï–õ –î–ñ–ï–ë
                  </textPath>
                </text>
              </svg>
            )}

            {/* –ú–∞–∫–∞–Ω ‚Äî –∫—Ä—É–ø–Ω–µ–µ; –ø–æ –∫–ª–∏–∫—É –ø–æ–ø-—ç—Ñ—Ñ–µ–∫—Ç –∏ —Å—á—ë—Ç—á–∏–∫ —Ç–∞–ø–æ–≤ */}
            <img
              src="/makan.png"
              alt={NICK}
              onClick={onMakanTap}
              className={[
                "cursor-pointer select-none",
                "drop-shadow-[0_18px_50px_rgba(0,0,0,0.65)]",
                "transition-transform duration-200 ease-out",
                "animate-wobble",
                popped ? "scale-[1.10]" : "scale-100",
                "w-[74%] md:w-[78%] relative z-10"
              ].join(" ")}
              draggable="false"
            />
          </div>

          {/* –¢–µ–∫—Å—Ç—ã */}
          <div className="mt-2 text-center">
            {isOver ? (
              <div className="text-2xl md:text-4xl font-extrabold">üéâ {NICK} –î–ï–ú–ë–ï–õ–¨–ù–£–õ–°–Ø!</div>
            ) : (
              <>
                <h1 className="text-lg md:text-xl font-semibold text-zinc-300">–î–æ –¥–µ–º–±–µ–ª—è {NICK}</h1>
                <div className="text-2xl md:text-4xl font-extrabold tracking-tight mt-1">{formatParts(leftParts)}</div>
                <div className="text-xs md:text-sm text-zinc-400 mt-1">–¢–∞–π–º–∑–æ–Ω–∞: {tz}</div>
              </>
            )}
          </div>

          {/* –õ–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className="w-full max-w-xl h-3 bg-zinc-800 rounded-full overflow-hidden mt-3">
            <div className="h-full bg-white/80" style={{ width: `${pct}%` }} />
          </div>
          <div className="text-xs text-zinc-300 mt-1">–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–ª—É–∂–±—ã: {pct.toFixed(2)}%</div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex flex-col items-center gap-3 mt-4">
            <button onClick={share} className="px-4 py-3 rounded-2xl bg-emerald-600 hover:bg-emerald-500 font-medium">
              –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–∞–π–º–µ—Ä–æ–º
            </button>

            <button onClick={openGroup} className="px-4 py-3 rounded-2xl bg-zinc-700 hover:bg-zinc-600 font-medium">
              –ñ–¥—ë–º –≤–º–µ—Å—Ç–µ
            </button>

            <div className="text-[10px] text-zinc-500">
              –¢–∞–ø—ã: {tapCount} (3 ‚Üí ¬´–î–ñ–ï–ë¬ª, 7 ‚Üí ¬´–£–®–ï–õ –î–ñ–ï–ë¬ª, 10 ‚Üí ¬´–î–ñ–ï–ë, –£–®–ï–õ –î–ñ–ï–ë¬ª)
            </div>
          </div>
        </section>
      </div>

      <footer className="text-xs text-zinc-400 text-center pb-4">
        –°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –∏ –∏—Ä–æ–Ω–∏–µ–π ‚Ä¢ {new Date().getFullYear()}
      </footer>
    </div>
  );
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–Ω–∫–µ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function SoldierCard({ profile, service }) {
  const start = shortDate(service.start);
  const end   = shortDate(service.end);

  const fields = [
    ["–†–µ–∞–ª—å–Ω–æ–µ –∏–º—è", profile.realName],
    ["–ü—Å–µ–≤–¥–æ–Ω–∏–º", profile.nickname],
    ["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", formatBirth(profile.birth.date)],
    ["–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", profile.birth.place],
    ["–°—Ç—Ä–∞–Ω–∞", profile.country],
    ["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", profile.profession],
    ["–ñ–∞–Ω—Ä—ã", profile.genres.join(", ")],
    ["–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã", profile.aliases.join(", ")],
    ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≥–æ–¥–Ω–æ—Å—Ç–∏", profile.fitnessCategory],
    ["–ú–µ—Å—Ç–æ —Å–ª—É–∂–±—ã", profile.assignment],
    ["–î–∞—Ç–∞ –ø—Ä–∏–∑—ã–≤–∞", start],
    ["–î–µ–º–±–µ–ª—å", end],
  ];

  return (
    <div className="rounded-3xl bg-[rgba(24,24,27,0.85)] shadow-xl p-4 md:p-5 border border-zinc-800/60">
      <div className="flex items-center gap-3 mb-4">
        <div className="h-10 w-10 rounded-full bg-emerald-600/25 border border-emerald-500/40 grid place-items-center">
          <span className="text-emerald-300 font-semibold">–ñ–ú</span>
        </div>
        <div>
          <div className="uppercase tracking-wider text-xs text-emerald-300/90">–ª–∏—á–Ω–æ–µ –¥–µ–ª–æ</div>
          <div className="text-lg font-bold leading-tight -mt-0.5">{profile.nickname}</div>
          <div className="text-[11px] text-zinc-400">{profile.realName}</div>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-2">
        {fields.map(([label, value]) => (
          <div key={label} className="flex items-center justify-between rounded-xl bg-zinc-900/60 border border-zinc-800 px-3 py-2">
            <span className="text-xs text-zinc-400">{label}</span>
            <span className="text-sm font-medium text-zinc-200 text-right">{value}</span>
          </div>
        ))}
      </div>

      <div className="mt-4 flex items-center gap-2 text-[11px] text-zinc-500">
        <span className="inline-block h-2 w-2 rounded-full bg-emerald-400/80" />
        –ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ PROFILE –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞.
      </div>
    </div>
  );
}

/* ---------- utils ---------- */
function formatBirth(yyyy_mm_dd) {
  const d = new Date(yyyy_mm_dd + "T00:00:00");
  return d.toLocaleDateString("ru-RU", { day: "numeric", month: "long", year: "numeric" });
}
function shortDate(iso) {
  const ts = toLocalTimestamp(iso);
  const d = new Date(ts);
  return d.toLocaleDateString("ru-RU", { day: "2-digit", month: "2-digit", year: "numeric" });
}
function toLocalTimestamp(input) {
  if (!input) return Date.now();
  const hasTZ = /Z|[+-]\d{2}:?\d{2}$/.test(input);
  if (hasTZ) return new Date(input).getTime();
  const [date, time = "00:00:00"] = String(input).split("T");
  const [y, m, d] = date.split("-").map(Number);
  const [hh, mm, ss] = time.split(":").map(Number);
  return new Date(y, (m || 1) - 1, d || 1, hh || 0, mm || 0, ss || 0, 0).getTime();
}
function msParts(ms) {
  let s = Math.max(0, Math.floor(ms / 1000));
  const days = Math.floor(s / 86400); s -= days * 86400;
  const hours = Math.floor(s / 3600); s -= hours * 3600;
  const minutes = Math.floor(s / 60); s -= minutes * 60;
  const seconds = s;
  return { days, hours, minutes, seconds };
}
function formatParts(p) {
  const dd = p.days > 0 ? `${p.days}–¥ ` : "";
  const hh = String(p.hours).padStart(2, "0");
  const mm = String(p.minutes).padStart(2, "0");
  const ss = String(p.seconds).padStart(2, "0");
  return `${dd}${hh}:${mm}:${ss}`;
}
