import React, { useEffect, useMemo, useRef, useState } from "react";
import confetti from "canvas-confetti";

/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const NICK = "–ú–∞–∫–∞–Ω";
const PROFILE = {
  realName: "–ê–Ω–¥—Ä–µ–π –ö–∏—Ä–∏–ª–ª–æ–≤–∏—á –ö–æ—Å–æ–ª–∞–ø–æ–≤",
  nickname: "–ú–∞–∫–∞–Ω",
  birth: { date: "2002-01-06", place: "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è" },
  country: "–†–æ—Å—Å–∏—è",
  profession: "—Ä—ç–ø–µ—Ä",
  genres: ["—Ä—ç–ø"],
  aliases: ["MC –ì–∞–π –§–æ–∫—Å", "Nemo MC", "Young Chaser", "Macan"],
  fitnessCategory: "–ê",
  assignment: "–ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –°–µ–º—ë–Ω–æ–≤—Å–∫–∏–π –ø–æ–ª–∫ (—É—Ç–æ—á–Ω—è–µ—Ç—Å—è)",
};
const SERVICE_START = "2025-10-01T00:00:00";
const DEMOBIL_DATE  = "2026-10-01T00:00:00";
/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

export default function App() {
  const tz = Intl.DateTimeFormat().resolvedOptions().timeZone || "Europe/Riga";
  const [now, setNow] = useState(Date.now());
  const [popped, setPopped] = useState(false);
  const [entered, setEntered] = useState(false);

  // –≤–∏–±—Ä–∞—Ü–∏—è
  const [vibrateEnabled, setVibrateEnabled] = useState(true);
  // –º–µ–Ω—é
  const [menuOpen, setMenuOpen] = useState(false);

  // —Å—á—ë—Ç—á–∏–∫ –∏ —Ñ–ª–∞–≥–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const [tapCount, setTapCount] = useState(0);
  const [show1, setShow1] = useState(false); // jeb1.png ‚Äî 3-–π —Ç–∞–ø
  const [show2, setShow2] = useState(false); // jeb2.png ‚Äî 7-–π —Ç–∞–ø
  const [show3, setShow3] = useState(false); // jeb3.png ‚Äî 10-–π —Ç–∞–ø

  const confettiDoneRef = useRef(false);

  useEffect(() => {
    const id = setInterval(() => setNow(Date.now()), 1000);
    return () => clearInterval(id);
  }, []);

  useEffect(() => {
    const twa = window.Telegram?.WebApp;
    try { twa?.expand(); twa?.ready(); twa?.enableClosingConfirmation(); } catch {}
    const t = setTimeout(() => setEntered(true), 50);
    return () => clearTimeout(t);
  }, []);

  // –∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏
  useEffect(() => {
    const saved = localStorage.getItem("vibrateEnabled");
    if (saved !== null) setVibrateEnabled(saved === "1");
  }, []);
  useEffect(() => {
    localStorage.setItem("vibrateEnabled", vibrateEnabled ? "1" : "0");
  }, [vibrateEnabled]);

  // –ê–≤—Ç–æ–ø—Ä–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞–¥–ø–∏—Å–µ–π —Å–ø—É—Å—Ç—è ~2.4—Å
  useEffect(() => {
    if (show1) { const t = setTimeout(() => setShow1(false), 2400); return () => clearTimeout(t); }
  }, [show1]);
  useEffect(() => {
    if (show2) { const t = setTimeout(() => setShow2(false), 2400); return () => clearTimeout(t); }
  }, [show2]);
  useEffect(() => {
    if (show3) { const t = setTimeout(() => setShow3(false), 2400); return () => clearTimeout(t); }
  }, [show3]);

  // –≤—Ä–µ–º—è —Å–ª—É–∂–±—ã
  const startTs = useMemo(() => toLocalTimestamp(SERVICE_START), []);
  const endTs   = useMemo(()   => toLocalTimestamp(DEMOBIL_DATE), []);
  const totalMs  = Math.max(0, endTs - startTs);
  const leftMs   = Math.max(0, endTs - now);
  const passedMs = Math.max(0, now - startTs);

  const pct = totalMs > 0 ? Math.min(100, Math.max(0, (passedMs / totalMs) * 100)) : 0;
  const leftParts = msParts(leftMs);
  const isOver = leftMs <= 0 && totalMs > 0;

  // –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –Ω—É–ª–µ
  useEffect(() => {
    if (isOver && !confettiDoneRef.current) {
      confettiDoneRef.current = true;
      burst(0.25); setTimeout(() => burst(0.5), 200); setTimeout(() => burst(0.75), 400);
      setTimeout(() => {
        confetti({ particleCount: 250, spread: 85, startVelocity: 45, scalar: 1.1, ticks: 240, origin: { y: 0.25 } });
      }, 900);
      try { navigator.vibrate?.(150); } catch {}
    }
    if (!isOver) confettiDoneRef.current = false;
  }, [isOver]);

  function burst(p = 0.5) {
    const n = Math.floor(100 * p);
    confetti({ particleCount: n, spread: 65, startVelocity: 38, origin: { x: 0.2, y: 0.4 } });
    confetti({ particleCount: n, spread: 65, startVelocity: 38, origin: { x: 0.8, y: 0.4 } });
  }

  function share() {
    const text = isOver
      ? `üéâ ${NICK} –î–ï–ú–ë–ï–õ–¨–ù–£–õ–°–Ø!\n\n–°–ª—É–∂–±–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`
      : `‚è≥ –î–æ –¥–µ–º–±–µ–ª—è ${NICK}: ${formatParts(leftParts)}.\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –æ—Ç—Å—á—ë—Ç—É!`;
    const url = window.location.href.split("?")[0];

    const twa = window.Telegram?.WebApp;
    if (twa?.shareURL) return twa.shareURL(url);
    if (twa?.shareText) return twa.shareText(`${text}\n${url}`);
    if (navigator.share) { navigator.share({ title: `–î–µ–º–±–µ–ª—å ${NICK}`, text, url }).catch(() => {}); return; }
    navigator.clipboard?.writeText(`${text}\n${url}`); alert("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ‚úÖ");
  }

  /* ‚îÄ‚îÄ –ö–æ–ª—å—Ü–æ ‚îÄ‚îÄ */
  const size = 360, stroke = 10, r = (size - stroke) / 2, C = 2 * Math.PI * r;
  // —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä—ã–π —Ç—Ä–µ–∫
  const SEGMENTS = 12, segmentLen = C / SEGMENTS, gapLen = Math.max(4, segmentLen * 0.08);
  const dashPattern = `${segmentLen - gapLen} ${gapLen}`;
  // –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –±–µ–ª—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  const progressDashArray = C;
  const progressDashOffset = C * (1 - pct / 100);
  const animatedProgressOffset = entered ? progressDashOffset : C;

  // —Ç–∞–ø –ø–æ –ú–∞–∫–∞–Ω—É
  function onMakanTap() {
    setPopped(true);
    setTimeout(() => setPopped(false), 180);

    // –≤–∏–±—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    if (vibrateEnabled) {
      try { navigator.vibrate?.(30); } catch {}
      // –ª—ë–≥–∫–∞—è haptic —á–µ—Ä–µ–∑ Telegram API (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
      try { window.Telegram?.WebApp?.HapticFeedback?.impactOccurred?.("light"); } catch {}
    }

    setTapCount((prev) => {
      const next = prev + 1;
      if (next === 3) setShow1(true);
      if (next === 7) setShow2(true);
      if (next === 10) setShow3(true);
      return next;
    });
  }

  function openGroup() {
    const url = "https://t.me/zdem_makana";
    const twa = window.Telegram?.WebApp;
    if (twa?.openTelegramLink) { twa.openTelegramLink(url); return; }
    window.open(url, "_blank", "noopener,noreferrer");
  }

  // clip-path –¥–ª—è JEB-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ç—Ä–æ–≥–æ –í–ù–£–¢–†–ò –∫—Ä—É–≥–∞
  const clipStyle = { clipPath: `circle(${r}px at ${size/2}px ${size/2}px)` };

  // –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–±—Ä–∞—Ü–∏–∏
  function toggleVibration() {
    setVibrateEnabled(v => !v);
    // –º–∏–∫—Ä–æ-—Ç–∏–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try { navigator.vibrate?.(10); } catch {}
    setMenuOpen(false);
  }

  return (
    <div className="min-h-screen w-full bg-gradient-to-b from-[#0f1514] to-[#0b1110] text-zinc-50">
      {/* –ë—É—Ä–≥–µ—Ä –º–µ–Ω—é (fixed, —Å–ª–µ–≤–∞ —Å–≤–µ—Ä—Ö—É) */}
      <div className="fixed left-3 top-3 z-[60]">
        <button
          aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
          onClick={() => setMenuOpen(o => !o)}
          className="glass-btn h-10 w-10 grid place-items-center rounded-xl"
        >
          <BurgerIcon />
        </button>

        {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é */}
        {menuOpen && (
          <div className="mt-2 w-60 glass-menu rounded-2xl p-2 shadow-xl border border-white/10">
            <button
              onClick={toggleVibration}
              className="w-full flex items-center gap-3 px-3 py-2 rounded-xl hover:bg-white/8 transition-colors"
            >
              {vibrateEnabled ? <VibrationOnIcon /> : <VibrationOffIcon />}
              <span className="text-sm">
                {vibrateEnabled ? "–í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–±—Ä–∞—Ü–∏—é" : "–í–∫–ª—é—á–∏—Ç—å –≤–∏–±—Ä–∞—Ü–∏—é"}
              </span>
            </button>
          </div>
        )}
      </div>

      <div className="mx-auto max-w-6xl grid md:grid-cols-[320px,1fr] gap-4 md:gap-6 p-4 pb-28">
        {/* –ê–Ω–∫–µ—Ç–∞ —Å–ª–µ–≤–∞ */}
        <section className={`order-2 md:order-1 ${entered ? "appear-fade-up" : ""}`}>
          <SoldierCard profile={PROFILE} service={{ start: SERVICE_START, end: DEMOBIL_DATE }} />
        </section>

        {/* –¢–∞–π–º–µ—Ä / —Å—Ü–µ–Ω–∞ */}
        <section className="order-1 md:order-2 relative flex flex-col items-center justify-start md:justify-center rounded-3xl bg-zinc-900/60 backdrop-blur p-5 md:p-6 shadow-xl overflow-hidden">
          <div
            aria-hidden
            className={`absolute inset-0 -z-10 ${entered ? "glow-enter" : ""}`}
            style={{ background: "radial-gradient(30rem 30rem at 50% 20%, rgba(16,185,129,0.18), rgba(0,0,0,0))" }}
          />

          <div className={`relative flex items-center justify-center ${entered ? "appear-scale" : ""}`} style={{ width: size, height: size }}>
            {/* –ö–æ–ª—å—Ü–æ */}
            <svg className="absolute inset-0 z-0" width={size} height={size} viewBox={`0 0 ${size} ${size}`}>
              <circle
                cx={size/2} cy={size/2} r={r}
                fill="none"
                stroke="rgba(255,255,255,0.13)"
                strokeWidth={stroke}
                strokeLinecap="butt"
                strokeDasharray={dashPattern}
                transform={`rotate(-90 ${size/2} ${size/2})`}
              />
              <circle
                cx={size/2} cy={size/2} r={r}
                fill="none"
                stroke="rgba(255,255,255,0.95)"
                strokeWidth={stroke}
                strokeLinecap="round"
                strokeDasharray={progressDashArray}
                strokeDashoffset={animatedProgressOffset}
                transform={`rotate(-90 ${size/2} ${size/2})`}
                style={{ transition: "stroke-dashoffset 900ms ease" }}
              />
            </svg>

            {/* –ó–æ–Ω–∞ –¥–ª—è JEB-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Å—Ç—Ä–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞ –∏ –Ω–∏–∂–µ –ú–∞–∫–∞–Ω–∞ */}
            <div className="absolute inset-0 z-[5] pointer-events-none" style={clipStyle}>
              {/* 1) 3-–π —Ç–∞–ø ‚Äî —Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É */}
              {show1 && (
                <img
                  src="/jeb1.png"
                  alt="–î–ñ–ï–ë"
                  className="absolute left-[6%] bottom-[20%] w-[40%] md:w-[34%] max-w-[280px] jeb-layer jeb-img animate-rise-left auto-fade-out"
                />
              )}

              {/* 2) 7-–π —Ç–∞–ø ‚Äî —Å–ø—Ä–∞–≤–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
              {show2 && (
                <img
                  src="/jeb2.png"
                  alt="–£–®–Å–õ –î–ñ–ï–ë"
                  className="absolute right-[5%] top-1/2 -translate-y-1/2 w-[46%] md:w-[38%] max-w-[320px] jeb-layer jeb-img animate-slide-from-right auto-fade-out"
                />
              )}

              {/* 3) 10-–π —Ç–∞–ø ‚Äî –¥—É–≥–æ–π —Å–≤–µ—Ä—Ö—É (–∫–∞—Ä—Ç–∏–Ω–∫–∞) */}
              {show3 && (
                <div className="absolute top-[6%] left-1/2 -translate-x-1/2 w-[78%] md:w-[68%] grid place-items-center jeb-layer auto-fade-out">
                  <img src="/jeb3.png" alt="–î–ñ–ï–ë, –£–®–Å–õ –î–ñ–ï–ë" className="w-full jeb-img" />
                </div>
              )}
            </div>

            {/* –ú–∞–∫–∞–Ω ‚Äî –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ */}
            <img
              src="/makan.png"
              alt={NICK}
              onClick={onMakanTap}
              className={[
                "cursor-pointer select-none",
                "drop-shadow-[0_18px_50px_rgba(0,0,0,0.65)]",
                "transition-transform duration-200 ease-out",
                "animate-wobble",
                popped ? "scale-[1.10]" : "scale-100",
                "w-[74%] md:w-[78%] makan-layer makan-shadow"
              ].join(" ")}
              draggable="false"
            />
          </div>

          {/* –¢–µ–∫—Å—Ç—ã –ø–æ–¥ —Å—Ü–µ–Ω–æ–π */}
          <div className={`mt-2 text-center ${entered ? "appear-fade-up" : ""}`}>
            {isOver ? (
              <div className="text-2xl md:text-4xl font-extrabold">üéâ {NICK} –î–ï–ú–ë–ï–õ–¨–ù–£–õ–°–Ø!</div>
            ) : (
              <>
                <h1 className="text-lg md:text-xl font-semibold text-zinc-300">–î–æ –¥–µ–º–±–µ–ª—è {NICK}</h1>
                <div className="text-2xl md:text-4xl font-extrabold tracking-tight mt-1">{formatParts(leftParts)}</div>
                <div className="text-xs md:text-sm text-zinc-400 mt-1">–¢–∞–π–º–∑–æ–Ω–∞: {tz}</div>
              </>
            )}
          </div>

          {/* –õ–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className="w-full max-w-xl h-3 bg-zinc-800 rounded-full overflow-hidden mt-3">
            <div className="h-full bg-white/80" style={{ width: `${pct}%` }} />
          </div>
          <div className="text-xs text-zinc-300 mt-1">–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–ª—É–∂–±—ã: {pct.toFixed(2)}%</div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex flex-col items-center gap-3 mt-4">
            <button onClick={share} className="px-4 py-3 rounded-2xl bg-emerald-600 hover:bg-emerald-500 font-medium">
              –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–∞–π–º–µ—Ä–æ–º
            </button>
            <button onClick={openGroup} className="px-4 py-3 rounded-2xl bg-zinc-700 hover:bg-zinc-600 font-medium">
              –ñ–¥—ë–º –≤–º–µ—Å—Ç–µ
            </button>
          </div>
        </section>
      </div>

      {/* –ù–∏–∂–Ω—è—è ¬´liquid glass¬ª –ø–∞–Ω–µ–ª—å */}
      <nav className="fixed left-0 right-0 bottom-3 z-[55] flex justify-center px-4">
        <div className="glass-bar w-full max-w-md h-14 rounded-2xl px-4 flex items-center justify-between">
          <button className="glass-item" aria-label="–ö–∞—Å–∫–∞">
            <HelmetIcon />
          </button>
          <button className="glass-item" aria-label="ID –∫–∞—Ä—Ç–∞">
            <IdCardIcon />
          </button>
          <button className="glass-item" aria-label="–ú–µ–¥–∞–ª–∏ / –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è">
            <MedalIcon />
          </button>
        </div>
      </nav>

      <footer className="text-xs text-zinc-400 text-center pb-5 pt-1">
        –°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –∏ –∏—Ä–æ–Ω–∏–µ–π ‚Ä¢ {new Date().getFullYear()}
      </footer>
    </div>
  );
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–Ω–∫–µ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function SoldierCard({ profile, service }) {
  const start = shortDate(service.start);
  const end   = shortDate(service.end);

  const fields = [
    ["–†–µ–∞–ª—å–Ω–æ–µ –∏–º—è", profile.realName],
    ["–ü—Å–µ–≤–¥–æ–Ω–∏–º", profile.nickname],
    ["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", formatBirth(profile.birth.date)],
    ["–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", profile.birth.place],
    ["–°—Ç—Ä–∞–Ω–∞", profile.country],
    ["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", profile.profession],
    ["–ñ–∞–Ω—Ä—ã", profile.genres.join(", ")],
    ["–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã", profile.aliases.join(", ")],
    ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≥–æ–¥–Ω–æ—Å—Ç–∏", profile.fitnessCategory],
    ["–ú–µ—Å—Ç–æ —Å–ª—É–∂–±—ã", profile.assignment],
    ["–î–∞—Ç–∞ –ø—Ä–∏–∑—ã–≤–∞", start],
    ["–î–µ–º–±–µ–ª—å", end],
  ];

  return (
    <div className="rounded-3xl bg-[rgba(24,24,27,0.85)] shadow-xl p-4 md:p-5 border border-zinc-800/60">
      <div className="flex items-center gap-3 mb-4">
        <div className="h-10 w-10 rounded-full bg-emerald-600/25 border border-emerald-500/40 grid place-items-center">
          <span className="text-emerald-300 font-semibold">–ñ–ú</span>
        </div>
        <div>
          <div className="uppercase tracking-wider text-xs text-emerald-300/90">–ª–∏—á–Ω–æ–µ –¥–µ–ª–æ</div>
          <div className="text-lg font-bold leading-tight -mt-0.5">{profile.nickname}</div>
          <div className="text-[11px] text-zinc-400">{profile.realName}</div>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-2">
        {fields.map(([label, value]) => (
          <div key={label} className="flex items-center justify-between rounded-xl bg-zinc-900/60 border border-zinc-800 px-3 py-2">
            <span className="text-xs text-zinc-400">{label}</span>
            <span className="text-sm font-medium text-zinc-200 text-right">{value}</span>
          </div>
        ))}
      </div>
    </div>
  );
}

/* ---------- utils ---------- */
function formatBirth(yyyy_mm_dd) {
  const d = new Date(yyyy_mm_dd + "T00:00:00");
  return d.toLocaleDateString("ru-RU", { day: "numeric", month: "long", year: "numeric" });
}
function shortDate(iso) {
  const ts = toLocalTimestamp(iso);
  const d = new Date(ts);
  return d.toLocaleDateString("ru-RU", { day: "2-digit", month: "2-digit", year: "numeric" });
}
function toLocalTimestamp(input) {
  if (!input) return Date.now();
  const hasTZ = /Z|[+-]\d{2}:?\d{2}$/.test(input);
  if (hasTZ) return new Date(input).getTime();
  const [date, time = "00:00:00"] = String(input).split("T");
  const [y, m, d] = date.split("-").map(Number);
  const [hh, mm, ss] = time.split(":").map(Number);
  return new Date(y, (m || 1) - 1, d || 1, hh || 0, mm || 0, ss || 0, 0).getTime();
}
function msParts(ms) {
  let s = Math.max(0, Math.floor(ms / 1000));
  const days = Math.floor(s / 86400); s -= days * 86400;
  const hours = Math.floor(s / 3600); s -= hours * 3600;
  const minutes = Math.floor(s / 60); s -= minutes * 60;
  const seconds = s;
  return { days, hours, minutes, seconds };
}
function formatParts(p) {
  const dd = p.days > 0 ? `${p.days}–¥ ` : "";
  const hh = String(p.hours).padStart(2, "0");
  const mm = String(p.minutes).padStart(2, "0");
  const ss = String(p.seconds).padStart(2, "0");
  return `${dd}${hh}:${mm}:${ss}`;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–ò–ù–ò-–ò–ö–û–ù–ö–ò (inline SVG) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function BurgerIcon() {
  return (
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
      <path d="M4 6h16M4 12h16M4 18h16" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
    </svg>
  );
}
function VibrationOnIcon() {
  return (
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
      <rect x="7" y="3" width="10" height="18" rx="2" stroke="currentColor" strokeWidth="2"/>
      <path d="M2 8l2 2-2 2 2 2-2 2" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
      <path d="M22 8l-2 2 2 2-2 2 2 2" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
    </svg>
  );
}
function VibrationOffIcon() {
  return (
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
      <rect x="7" y="3" width="10" height="18" rx="2" stroke="currentColor" strokeWidth="2"/>
      <path d="M2 8l2 2-2 2 2 2-2 2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" opacity=".35"/>
      <path d="M22 8l-2 2 2 2-2 2 2 2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" opacity=".35"/>
      <path d="M5 5l14 14" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
    </svg>
  );
}
function HelmetIcon() {
  return (
    <svg width="22" height="22" viewBox="0 0 24 24" fill="none">
      <path d="M3 13a9 9 0 1118 0v4H3v-4z" stroke="currentColor" strokeWidth="2" fill="none"/>
      <path d="M12 4v5h9" stroke="currentColor" strokeWidth="2" />
    </svg>
  );
}
function IdCardIcon() {
  return (
    <svg width="22" height="22" viewBox="0 0 24 24" fill="none">
      <rect x="3" y="5" width="18" height="14" rx="2" stroke="currentColor" strokeWidth="2"/>
      <circle cx="9" cy="12" r="2" stroke="currentColor" strokeWidth="2"/>
      <path d="M14 10h5M14 13h5M14 16h5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
    </svg>
  );
}
function MedalIcon() {
  return (
    <svg width="22" height="22" viewBox="0 0 24 24" fill="none">
      <circle cx="12" cy="14" r="4" stroke="currentColor" strokeWidth="2"/>
      <path d="M7 3l5 6 5-6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
    </svg>
  );
}
